{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function schemaDefinitionNotAloneMessage() {\n  return 'Must provide only one schema definition.';\n}\nexport function canNotDefineSchemaWithinExtensionMessage() {\n  return 'Cannot define a new schema within a schema extension.';\n}\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\n\nexport function LoneSchemaDefinition(context) {\n  var oldSchema = context.getSchema();\n  var alreadyDefined = oldSchema && (oldSchema.astNode || oldSchema.getQueryType() || oldSchema.getMutationType() || oldSchema.getSubscriptionType());\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError(canNotDefineSchemaWithinExtensionMessage(), node));\n        return;\n      }\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError(schemaDefinitionNotAloneMessage(), node));\n      }\n      ++schemaDefinitionsCount;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","schemaDefinitionNotAloneMessage","canNotDefineSchemaWithinExtensionMessage","LoneSchemaDefinition","context","oldSchema","getSchema","alreadyDefined","astNode","getQueryType","getMutationType","getSubscriptionType","schemaDefinitionsCount","SchemaDefinition","node","reportError"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/LoneSchemaDefinition.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function schemaDefinitionNotAloneMessage() {\n  return 'Must provide only one schema definition.';\n}\nexport function canNotDefineSchemaWithinExtensionMessage() {\n  return 'Cannot define a new schema within a schema extension.';\n}\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\n\nexport function LoneSchemaDefinition(context) {\n  var oldSchema = context.getSchema();\n  var alreadyDefined = oldSchema && (oldSchema.astNode || oldSchema.getQueryType() || oldSchema.getMutationType() || oldSchema.getSubscriptionType());\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError(canNotDefineSchemaWithinExtensionMessage(), node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError(schemaDefinitionNotAloneMessage(), node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,+BAA+B,GAAG;EAChD,OAAO,0CAA0C;AACnD;AACA,OAAO,SAASC,wCAAwC,GAAG;EACzD,OAAO,uDAAuD;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAoB,CAACC,OAAO,EAAE;EAC5C,IAAIC,SAAS,GAAGD,OAAO,CAACE,SAAS,EAAE;EACnC,IAAIC,cAAc,GAAGF,SAAS,KAAKA,SAAS,CAACG,OAAO,IAAIH,SAAS,CAACI,YAAY,EAAE,IAAIJ,SAAS,CAACK,eAAe,EAAE,IAAIL,SAAS,CAACM,mBAAmB,EAAE,CAAC;EACnJ,IAAIC,sBAAsB,GAAG,CAAC;EAC9B,OAAO;IACLC,gBAAgB,EAAE,SAASA,gBAAgB,CAACC,IAAI,EAAE;MAChD,IAAIP,cAAc,EAAE;QAClBH,OAAO,CAACW,WAAW,CAAC,IAAIf,YAAY,CAACE,wCAAwC,EAAE,EAAEY,IAAI,CAAC,CAAC;QACvF;MACF;MAEA,IAAIF,sBAAsB,GAAG,CAAC,EAAE;QAC9BR,OAAO,CAACW,WAAW,CAAC,IAAIf,YAAY,CAACC,+BAA+B,EAAE,EAAEa,IAAI,CAAC,CAAC;MAChF;MAEA,EAAEF,sBAAsB;IAC1B;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}