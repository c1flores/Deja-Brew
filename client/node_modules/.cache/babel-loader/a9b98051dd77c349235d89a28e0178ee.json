{"ast":null,"code":"import { visit } from '../language/visitor';\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName;\n  var idx = 0; // Populate metadata and build a dependency graph.\n\n  visit(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  }); // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  var separatedDocumentASTs = Object.create(null);\n  for (var _i2 = 0; _i2 < operations.length; _i2++) {\n    var operation = operations[_i2];\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    var definitions = [operation];\n    for (var _i4 = 0, _Object$keys2 = Object.keys(dependencies); _i4 < _Object$keys2.length; _i4++) {\n      var name = _Object$keys2[_i4];\n      definitions.push(fragments[name]);\n    }\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  }\n  return separatedDocumentASTs;\n}\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n  if (immediateDeps) {\n    for (var _i6 = 0, _Object$keys4 = Object.keys(immediateDeps); _i6 < _Object$keys4.length; _i6++) {\n      var toName = _Object$keys4[_i6];\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}","map":{"version":3,"names":["visit","separateOperations","documentAST","operations","fragments","Object","create","positions","Map","depGraph","fromName","idx","OperationDefinition","node","opName","push","set","FragmentDefinition","name","value","FragmentSpread","toName","separatedDocumentASTs","_i2","length","operation","operationName","dependencies","collectTransitiveDependencies","definitions","_i4","_Object$keys2","keys","sort","n1","n2","get","kind","collected","immediateDeps","_i6","_Object$keys4"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/utilities/separateOperations.mjs"],"sourcesContent":["import { visit } from '../language/visitor';\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName;\n  var idx = 0; // Populate metadata and build a dependency graph.\n\n  visit(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  }); // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  var separatedDocumentASTs = Object.create(null);\n\n  for (var _i2 = 0; _i2 < operations.length; _i2++) {\n    var operation = operations[_i2];\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    var definitions = [operation];\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(dependencies); _i4 < _Object$keys2.length; _i4++) {\n      var name = _Object$keys2[_i4];\n      definitions.push(fragments[name]);\n    }\n\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n\n  if (immediateDeps) {\n    for (var _i6 = 0, _Object$keys4 = Object.keys(immediateDeps); _i6 < _Object$keys4.length; _i6++) {\n      var toName = _Object$keys4[_i6];\n\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}