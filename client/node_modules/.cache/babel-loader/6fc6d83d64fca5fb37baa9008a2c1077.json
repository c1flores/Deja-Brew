{"ast":null,"code":"/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var inputThreshold = input.length / 2;\n  for (var _i2 = 0; _i2 < options.length; _i2++) {\n    var option = options[_i2];\n    var distance = lexicalDistance(input, option);\n    var threshold = Math.max(inputThreshold, option.length / 2, 1);\n    if (distance <= threshold) {\n      optionsByDistance[option] = distance;\n    }\n  }\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n  for (var i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n  for (var j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n  for (var _i3 = 1; _i3 <= aLength; _i3++) {\n    for (var _j = 1; _j <= bLength; _j++) {\n      var cost = a[_i3 - 1] === b[_j - 1] ? 0 : 1;\n      d[_i3][_j] = Math.min(d[_i3 - 1][_j] + 1, d[_i3][_j - 1] + 1, d[_i3 - 1][_j - 1] + cost);\n      if (_i3 > 1 && _j > 1 && a[_i3 - 1] === b[_j - 2] && a[_i3 - 2] === b[_j - 1]) {\n        d[_i3][_j] = Math.min(d[_i3][_j], d[_i3 - 2][_j - 2] + cost);\n      }\n    }\n  }\n  return d[aLength][bLength];\n}","map":{"version":3,"names":["suggestionList","input","options","optionsByDistance","Object","create","inputThreshold","length","_i2","option","distance","lexicalDistance","threshold","Math","max","keys","sort","a","b","aStr","bStr","d","toLowerCase","aLength","bLength","i","j","_i3","_j","cost","min"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/jsutils/suggestionList.mjs"],"sourcesContent":["/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var inputThreshold = input.length / 2;\n\n  for (var _i2 = 0; _i2 < options.length; _i2++) {\n    var option = options[_i2];\n    var distance = lexicalDistance(input, option);\n    var threshold = Math.max(inputThreshold, option.length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (var i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (var j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (var _i3 = 1; _i3 <= aLength; _i3++) {\n    for (var _j = 1; _j <= bLength; _j++) {\n      var cost = a[_i3 - 1] === b[_j - 1] ? 0 : 1;\n      d[_i3][_j] = Math.min(d[_i3 - 1][_j] + 1, d[_i3][_j - 1] + 1, d[_i3 - 1][_j - 1] + cost);\n\n      if (_i3 > 1 && _j > 1 && a[_i3 - 1] === b[_j - 2] && a[_i3 - 2] === b[_j - 1]) {\n        d[_i3][_j] = Math.min(d[_i3][_j], d[_i3 - 2][_j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}