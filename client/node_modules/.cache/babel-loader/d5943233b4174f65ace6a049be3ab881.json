{"ast":null,"code":"import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);","map":{"version":3,"names":["devAssert","defineToStringTag","Source","body","name","locationOffset","line","column"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/language/source.mjs"],"sourcesContent":["import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,iBAAiB,MAAM,8BAA8B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAG,SAASA,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAEC,cAAc,EAAE;EAC9D,IAAI,CAACF,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,IAAI,GAAGA,IAAI,IAAI,iBAAiB;EACrC,IAAI,CAACC,cAAc,GAAGA,cAAc,IAAI;IACtCC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE;EACV,CAAC;EACD,IAAI,CAACF,cAAc,CAACC,IAAI,GAAG,CAAC,IAAIN,SAAS,CAAC,CAAC,EAAE,0DAA0D,CAAC;EACxG,IAAI,CAACK,cAAc,CAACE,MAAM,GAAG,CAAC,IAAIP,SAAS,CAAC,CAAC,EAAE,4DAA4D,CAAC;AAC9G,CAAC,CAAC,CAAC;;AAEHC,iBAAiB,CAACC,MAAM,CAAC"},"metadata":{},"sourceType":"module"}