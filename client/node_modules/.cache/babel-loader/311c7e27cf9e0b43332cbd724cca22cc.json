{"ast":null,"code":"import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport didYouMean from '../jsutils/didYouMean';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport suggestionList from '../jsutils/suggestionList';\nimport printPathArray from '../jsutils/printPathArray';\nimport { addPath, pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\": \");\n  }\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \".concat(inspect(type), \" not to be null.\")));\n    return;\n  }\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    if (isCollection(inputValue)) {\n      var coercedValue = [];\n      forEach(inputValue, function (itemValue, index) {\n        coercedValue.push(coerceInputValueImpl(itemValue, itemType, onError, addPath(path, index)));\n      });\n      return coercedValue;\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \" to be an object.\")));\n      return;\n    }\n    var _coercedValue = {};\n    var fieldDefs = type.getFields();\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          _coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \".concat(field.name, \" of required type \").concat(typeStr, \" was not provided.\")));\n        }\n        continue;\n      }\n      _coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name));\n    } // Ensure every provided field is defined.\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(type.name, \".\") + didYouMean(suggestions)));\n      }\n    }\n    return _coercedValue;\n  }\n  if (isScalarType(type)) {\n    var parseResult; // Scalars determine if a input value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \". \") + error.message, undefined, undefined, undefined, undefined, error));\n      return;\n    }\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\")));\n    }\n    return parseResult;\n  }\n\n  /* istanbul ignore else */\n  if (isEnumType(type)) {\n    if (typeof inputValue === 'string') {\n      var enumValue = type.getValue(inputValue);\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n    var _suggestions = suggestionList(String(inputValue), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\") + didYouMean(_suggestions)));\n    return;\n  } // Not reachable. All possible input types have been considered.\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"names":["forEach","isCollection","objectValues","inspect","invariant","didYouMean","isObjectLike","suggestionList","printPathArray","addPath","pathToArray","GraphQLError","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","arguments","length","undefined","defaultOnError","coerceInputValueImpl","path","invalidValue","error","errorPrefix","concat","message","ofType","itemType","coercedValue","itemValue","index","push","name","_coercedValue","fieldDefs","getFields","_i2","_objectValues2","field","fieldValue","defaultValue","typeStr","_i4","_Object$keys2","Object","keys","fieldName","suggestions","parseResult","parseValue","enumValue","getValue","value","_suggestions","String","getValues","map"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/utilities/coerceInputValue.mjs"],"sourcesContent":["import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport didYouMean from '../jsutils/didYouMean';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport suggestionList from '../jsutils/suggestionList';\nimport printPathArray from '../jsutils/printPathArray';\nimport { addPath, pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\": \");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \".concat(inspect(type), \" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(inputValue)) {\n      var coercedValue = [];\n      forEach(inputValue, function (itemValue, index) {\n        coercedValue.push(coerceInputValueImpl(itemValue, itemType, onError, addPath(path, index)));\n      });\n      return coercedValue;\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \" to be an object.\")));\n      return;\n    }\n\n    var _coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          _coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \".concat(field.name, \" of required type \").concat(typeStr, \" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      _coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(type.name, \".\") + didYouMean(suggestions)));\n      }\n    }\n\n    return _coercedValue;\n  }\n\n  if (isScalarType(type)) {\n    var parseResult; // Scalars determine if a input value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \". \") + error.message, undefined, undefined, undefined, undefined, error));\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\")));\n    }\n\n    return parseResult;\n  }\n\n  /* istanbul ignore else */\n  if (isEnumType(type)) {\n    if (typeof inputValue === 'string') {\n      var enumValue = type.getValue(inputValue);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n\n    var _suggestions = suggestionList(String(inputValue), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\") + didYouMean(_suggestions)));\n    return;\n  } // Not reachable. All possible input types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}