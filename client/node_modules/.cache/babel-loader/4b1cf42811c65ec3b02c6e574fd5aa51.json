{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateArgMessage(argName) {\n  return \"There can be only one argument named \\\"\".concat(argName, \"\\\".\");\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateArgMessage","argName","concat","UniqueArgumentNames","context","knownArgNames","Object","create","Field","Directive","Argument","node","name","value","reportError"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/UniqueArgumentNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateArgMessage(argName) {\n  return \"There can be only one argument named \\\"\".concat(argName, \"\\\".\");\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,mBAAmB,CAACC,OAAO,EAAE;EAC3C,OAAO,yCAAyC,CAACC,MAAM,CAACD,OAAO,EAAE,KAAK,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,mBAAmB,CAACC,OAAO,EAAE;EAC3C,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACvC,OAAO;IACLC,KAAK,EAAE,SAASA,KAAK,GAAG;MACtBH,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACrC,CAAC;IACDE,SAAS,EAAE,SAASA,SAAS,GAAG;MAC9BJ,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACrC,CAAC;IACDG,QAAQ,EAAE,SAASA,QAAQ,CAACC,IAAI,EAAE;MAChC,IAAIV,OAAO,GAAGU,IAAI,CAACC,IAAI,CAACC,KAAK;MAE7B,IAAIR,aAAa,CAACJ,OAAO,CAAC,EAAE;QAC1BG,OAAO,CAACU,WAAW,CAAC,IAAIf,YAAY,CAACC,mBAAmB,CAACC,OAAO,CAAC,EAAE,CAACI,aAAa,CAACJ,OAAO,CAAC,EAAEU,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MAC1G,CAAC,MAAM;QACLP,aAAa,CAACJ,OAAO,CAAC,GAAGU,IAAI,CAACC,IAAI;MACpC;MAEA,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}