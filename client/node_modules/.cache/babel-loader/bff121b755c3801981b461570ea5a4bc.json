{"ast":null,"code":"var _defKindToExtKind;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isTypeDefinitionNode } from '../../language/predicates';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../../type/definition';\nexport function extendingUnknownTypeMessage(typeName, suggestedTypes) {\n  return \"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\nexport function extendingDifferentTypeKindMessage(typeName, kind) {\n  return \"Cannot extend non-\".concat(kind, \" type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\n\nexport function PossibleTypeExtensions(context) {\n  var schema = context.getSchema();\n  var definedTypes = Object.create(null);\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n  function checkExtension(node) {\n    var typeName = node.name.value;\n    var defNode = definedTypes[typeName];\n    var existingType = schema && schema.getType(typeName);\n    if (defNode) {\n      var expectedKind = defKindToExtKind[defNode.kind];\n      if (expectedKind !== node.kind) {\n        context.reportError(new GraphQLError(extendingDifferentTypeKindMessage(typeName, extensionKindToTypeName(expectedKind)), [defNode, node]));\n      }\n    } else if (existingType) {\n      var _expectedKind = typeToExtKind(existingType);\n      if (_expectedKind !== node.kind) {\n        context.reportError(new GraphQLError(extendingDifferentTypeKindMessage(typeName, extensionKindToTypeName(_expectedKind)), node));\n      }\n    } else {\n      var allTypeNames = Object.keys(definedTypes);\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(extendingUnknownTypeMessage(typeName, suggestedTypes), node.name));\n    }\n  }\n}\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  } else if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  } else if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  } else if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  } else if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } else if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n}\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    default:\n      return 'unknown type';\n  }\n}","map":{"version":3,"names":["_defKindToExtKind","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","didYouMean","suggestionList","GraphQLError","Kind","isTypeDefinitionNode","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","extendingUnknownTypeMessage","typeName","suggestedTypes","concat","map","x","extendingDifferentTypeKindMessage","kind","PossibleTypeExtensions","context","schema","getSchema","definedTypes","create","_i2","_context$getDocument$2","getDocument","definitions","length","def","name","ScalarTypeExtension","checkExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","node","defNode","existingType","getType","expectedKind","defKindToExtKind","reportError","extensionKindToTypeName","_expectedKind","typeToExtKind","allTypeNames","keys","getTypeMap","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","type"],"sources":["C:/Users/Christian Flores/Desktop/Deja-Brew/client/node_modules/graphql/validation/rules/PossibleTypeExtensions.mjs"],"sourcesContent":["var _defKindToExtKind;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isTypeDefinitionNode } from '../../language/predicates';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../../type/definition';\nexport function extendingUnknownTypeMessage(typeName, suggestedTypes) {\n  return \"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\nexport function extendingDifferentTypeKindMessage(typeName, kind) {\n  return \"Cannot extend non-\".concat(kind, \" type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\n\nexport function PossibleTypeExtensions(context) {\n  var schema = context.getSchema();\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    var typeName = node.name.value;\n    var defNode = definedTypes[typeName];\n    var existingType = schema && schema.getType(typeName);\n\n    if (defNode) {\n      var expectedKind = defKindToExtKind[defNode.kind];\n\n      if (expectedKind !== node.kind) {\n        context.reportError(new GraphQLError(extendingDifferentTypeKindMessage(typeName, extensionKindToTypeName(expectedKind)), [defNode, node]));\n      }\n    } else if (existingType) {\n      var _expectedKind = typeToExtKind(existingType);\n\n      if (_expectedKind !== node.kind) {\n        context.reportError(new GraphQLError(extendingDifferentTypeKindMessage(typeName, extensionKindToTypeName(_expectedKind)), node));\n      }\n    } else {\n      var allTypeNames = Object.keys(definedTypes);\n\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(extendingUnknownTypeMessage(typeName, suggestedTypes), node.name));\n    }\n  }\n}\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  } else if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  } else if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  } else if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  } else if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } else if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n\n    default:\n      return 'unknown type';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}