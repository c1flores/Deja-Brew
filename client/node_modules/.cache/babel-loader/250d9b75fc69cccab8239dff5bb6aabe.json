{"ast":null,"code":"import flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { printBlockString } from '../language/blockString';\nimport { isIntrospectionType } from '../type/introspection';\nimport { GraphQLString, isSpecifiedScalarType } from '../type/scalars';\nimport { GraphQLDirective, DEFAULT_DEPRECATION_REASON, isSpecifiedDirective } from '../type/directives';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { astFromValue } from '../utilities/astFromValue';\n\n/**\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function printSchema(schema, options) {\n  return printFilteredSchema(schema, function (n) {\n    return !isSpecifiedDirective(n);\n  }, isDefinedType, options);\n}\nexport function printIntrospectionSchema(schema, options) {\n  return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType, options);\n}\nfunction isDefinedType(type) {\n  return !isSpecifiedScalarType(type) && !isIntrospectionType(type);\n}\nfunction printFilteredSchema(schema, directiveFilter, typeFilter, options) {\n  var directives = schema.getDirectives().filter(directiveFilter);\n  var typeMap = schema.getTypeMap();\n  var types = objectValues(typeMap).sort(function (type1, type2) {\n    return type1.name.localeCompare(type2.name);\n  }).filter(typeFilter);\n  return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {\n    return printDirective(directive, options);\n  }), types.map(function (type) {\n    return printType(type, options);\n  })).filter(Boolean).join('\\n\\n') + '\\n';\n}\nfunction printSchemaDefinition(schema) {\n  if (isSchemaOfCommonNames(schema)) {\n    return;\n  }\n  var operationTypes = [];\n  var queryType = schema.getQueryType();\n  if (queryType) {\n    operationTypes.push(\"  query: \".concat(queryType.name));\n  }\n  var mutationType = schema.getMutationType();\n  if (mutationType) {\n    operationTypes.push(\"  mutation: \".concat(mutationType.name));\n  }\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType) {\n    operationTypes.push(\"  subscription: \".concat(subscriptionType.name));\n  }\n  return \"schema {\\n\".concat(operationTypes.join('\\n'), \"\\n}\");\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *   }\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\nfunction isSchemaOfCommonNames(schema) {\n  var queryType = schema.getQueryType();\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n  var mutationType = schema.getMutationType();\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n  return true;\n}\nexport function printType(type, options) {\n  if (isScalarType(type)) {\n    return printScalar(type, options);\n  } else if (isObjectType(type)) {\n    return printObject(type, options);\n  } else if (isInterfaceType(type)) {\n    return printInterface(type, options);\n  } else if (isUnionType(type)) {\n    return printUnion(type, options);\n  } else if (isEnumType(type)) {\n    return printEnum(type, options);\n  } else if (isInputObjectType(type)) {\n    return printInputObject(type, options);\n  } // Not reachable. All possible types have been considered.\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\nfunction printScalar(type, options) {\n  return printDescription(options, type) + \"scalar \".concat(type.name);\n}\nfunction printObject(type, options) {\n  var interfaces = type.getInterfaces();\n  var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {\n    return i.name;\n  }).join(' & ') : '';\n  return printDescription(options, type) + \"type \".concat(type.name).concat(implementedInterfaces) + printFields(options, type);\n}\nfunction printInterface(type, options) {\n  return printDescription(options, type) + \"interface \".concat(type.name) + printFields(options, type);\n}\nfunction printUnion(type, options) {\n  var types = type.getTypes();\n  var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(options, type) + 'union ' + type.name + possibleTypes;\n}\nfunction printEnum(type, options) {\n  var values = type.getValues().map(function (value, i) {\n    return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);\n  });\n  return printDescription(options, type) + \"enum \".concat(type.name) + printBlock(values);\n}\nfunction printInputObject(type, options) {\n  var fields = objectValues(type.getFields()).map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);\n  });\n  return printDescription(options, type) + \"input \".concat(type.name) + printBlock(fields);\n}\nfunction printFields(options, type) {\n  var fields = objectValues(type.getFields()).map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);\n  });\n  return printBlock(fields);\n}\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\nfunction printArgs(options, args) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n  if (args.every(function (arg) {\n    return !arg.description;\n  })) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n  return '(\\n' + args.map(function (arg, i) {\n    return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);\n  }).join('\\n') + '\\n' + indentation + ')';\n}\nfunction printInputValue(arg) {\n  var defaultAST = astFromValue(arg.defaultValue, arg.type);\n  var argDecl = arg.name + ': ' + String(arg.type);\n  if (defaultAST) {\n    argDecl += \" = \".concat(print(defaultAST));\n  }\n  return argDecl;\n}\nfunction printDirective(directive, options) {\n  return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');\n}\nfunction printDeprecated(fieldOrEnumVal) {\n  if (!fieldOrEnumVal.isDeprecated) {\n    return '';\n  }\n  var reason = fieldOrEnumVal.deprecationReason;\n  var reasonAST = astFromValue(reason, GraphQLString);\n  if (reasonAST && reason !== '' && reason !== DEFAULT_DEPRECATION_REASON) {\n    return ' @deprecated(reason: ' + print(reasonAST) + ')';\n  }\n  return ' @deprecated';\n}\nfunction printDescription(options, def) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!def.description) {\n    return '';\n  }\n  var lines = descriptionLines(def.description, 120 - indentation.length);\n  if (options && options.commentDescriptions) {\n    return printDescriptionWithComments(lines, indentation, firstInBlock);\n  }\n  var text = lines.join('\\n');\n  var preferMultipleLines = text.length > 70;\n  var blockString = printBlockString(text, '', preferMultipleLines);\n  var prefix = indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}\nfunction printDescriptionWithComments(lines, indentation, firstInBlock) {\n  var description = indentation && !firstInBlock ? '\\n' : '';\n  for (var _i2 = 0; _i2 < lines.length; _i2++) {\n    var line = lines[_i2];\n    if (line === '') {\n      description += indentation + '#\\n';\n    } else {\n      description += indentation + '# ' + line + '\\n';\n    }\n  }\n  return description;\n}\nfunction descriptionLines(description, maxLen) {\n  var rawLines = description.split('\\n');\n  return flatMap(rawLines, function (line) {\n    if (line.length < maxLen + 5) {\n      return line;\n    } // For > 120 character long lines, cut at space boundaries into sublines\n    // of ~80 chars.\n\n    return breakLine(line, maxLen);\n  });\n}\nfunction breakLine(line, maxLen) {\n  var parts = line.split(new RegExp(\"((?: |^).{15,\".concat(maxLen - 40, \"}(?= |$))\")));\n  if (parts.length < 4) {\n    return [line];\n  }\n  var sublines = [parts[0] + parts[1] + parts[2]];\n  for (var i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1]);\n  }\n  return sublines;\n}","map":{"version":3,"names":["flatMap","objectValues","inspect","invariant","print","printBlockString","isIntrospectionType","GraphQLString","isSpecifiedScalarType","GraphQLDirective","DEFAULT_DEPRECATION_REASON","isSpecifiedDirective","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","astFromValue","printSchema","schema","options","printFilteredSchema","n","isDefinedType","printIntrospectionSchema","type","directiveFilter","typeFilter","directives","getDirectives","filter","typeMap","getTypeMap","types","sort","type1","type2","name","localeCompare","printSchemaDefinition","concat","map","directive","printDirective","printType","Boolean","join","isSchemaOfCommonNames","operationTypes","queryType","getQueryType","push","mutationType","getMutationType","subscriptionType","getSubscriptionType","printScalar","printObject","printInterface","printUnion","printEnum","printInputObject","printDescription","interfaces","getInterfaces","implementedInterfaces","length","i","printFields","getTypes","possibleTypes","values","getValues","value","printDeprecated","printBlock","fields","getFields","f","printInputValue","printArgs","args","String","items","indentation","arguments","undefined","every","arg","description","defaultAST","defaultValue","argDecl","isRepeatable","locations","fieldOrEnumVal","isDeprecated","reason","deprecationReason","reasonAST","def","firstInBlock","lines","descriptionLines","commentDescriptions","printDescriptionWithComments","text","preferMultipleLines","blockString","prefix","replace","_i2","line","maxLen","rawLines","split","breakLine","parts","RegExp","sublines","slice"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/utilities/schemaPrinter.mjs"],"sourcesContent":["import flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { printBlockString } from '../language/blockString';\nimport { isIntrospectionType } from '../type/introspection';\nimport { GraphQLString, isSpecifiedScalarType } from '../type/scalars';\nimport { GraphQLDirective, DEFAULT_DEPRECATION_REASON, isSpecifiedDirective } from '../type/directives';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { astFromValue } from '../utilities/astFromValue';\n\n/**\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function printSchema(schema, options) {\n  return printFilteredSchema(schema, function (n) {\n    return !isSpecifiedDirective(n);\n  }, isDefinedType, options);\n}\nexport function printIntrospectionSchema(schema, options) {\n  return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType, options);\n}\n\nfunction isDefinedType(type) {\n  return !isSpecifiedScalarType(type) && !isIntrospectionType(type);\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter, options) {\n  var directives = schema.getDirectives().filter(directiveFilter);\n  var typeMap = schema.getTypeMap();\n  var types = objectValues(typeMap).sort(function (type1, type2) {\n    return type1.name.localeCompare(type2.name);\n  }).filter(typeFilter);\n  return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {\n    return printDirective(directive, options);\n  }), types.map(function (type) {\n    return printType(type, options);\n  })).filter(Boolean).join('\\n\\n') + '\\n';\n}\n\nfunction printSchemaDefinition(schema) {\n  if (isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  var operationTypes = [];\n  var queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(\"  query: \".concat(queryType.name));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(\"  mutation: \".concat(mutationType.name));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(\"  subscription: \".concat(subscriptionType.name));\n  }\n\n  return \"schema {\\n\".concat(operationTypes.join('\\n'), \"\\n}\");\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *   }\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\n\nfunction isSchemaOfCommonNames(schema) {\n  var queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nexport function printType(type, options) {\n  if (isScalarType(type)) {\n    return printScalar(type, options);\n  } else if (isObjectType(type)) {\n    return printObject(type, options);\n  } else if (isInterfaceType(type)) {\n    return printInterface(type, options);\n  } else if (isUnionType(type)) {\n    return printUnion(type, options);\n  } else if (isEnumType(type)) {\n    return printEnum(type, options);\n  } else if (isInputObjectType(type)) {\n    return printInputObject(type, options);\n  } // Not reachable. All possible types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction printScalar(type, options) {\n  return printDescription(options, type) + \"scalar \".concat(type.name);\n}\n\nfunction printObject(type, options) {\n  var interfaces = type.getInterfaces();\n  var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {\n    return i.name;\n  }).join(' & ') : '';\n  return printDescription(options, type) + \"type \".concat(type.name).concat(implementedInterfaces) + printFields(options, type);\n}\n\nfunction printInterface(type, options) {\n  return printDescription(options, type) + \"interface \".concat(type.name) + printFields(options, type);\n}\n\nfunction printUnion(type, options) {\n  var types = type.getTypes();\n  var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(options, type) + 'union ' + type.name + possibleTypes;\n}\n\nfunction printEnum(type, options) {\n  var values = type.getValues().map(function (value, i) {\n    return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);\n  });\n  return printDescription(options, type) + \"enum \".concat(type.name) + printBlock(values);\n}\n\nfunction printInputObject(type, options) {\n  var fields = objectValues(type.getFields()).map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);\n  });\n  return printDescription(options, type) + \"input \".concat(type.name) + printBlock(fields);\n}\n\nfunction printFields(options, type) {\n  var fields = objectValues(type.getFields()).map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);\n  });\n  return printBlock(fields);\n}\n\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\n\nfunction printArgs(options, args) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n\n  if (args.every(function (arg) {\n    return !arg.description;\n  })) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return '(\\n' + args.map(function (arg, i) {\n    return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);\n  }).join('\\n') + '\\n' + indentation + ')';\n}\n\nfunction printInputValue(arg) {\n  var defaultAST = astFromValue(arg.defaultValue, arg.type);\n  var argDecl = arg.name + ': ' + String(arg.type);\n\n  if (defaultAST) {\n    argDecl += \" = \".concat(print(defaultAST));\n  }\n\n  return argDecl;\n}\n\nfunction printDirective(directive, options) {\n  return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');\n}\n\nfunction printDeprecated(fieldOrEnumVal) {\n  if (!fieldOrEnumVal.isDeprecated) {\n    return '';\n  }\n\n  var reason = fieldOrEnumVal.deprecationReason;\n  var reasonAST = astFromValue(reason, GraphQLString);\n\n  if (reasonAST && reason !== '' && reason !== DEFAULT_DEPRECATION_REASON) {\n    return ' @deprecated(reason: ' + print(reasonAST) + ')';\n  }\n\n  return ' @deprecated';\n}\n\nfunction printDescription(options, def) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (!def.description) {\n    return '';\n  }\n\n  var lines = descriptionLines(def.description, 120 - indentation.length);\n\n  if (options && options.commentDescriptions) {\n    return printDescriptionWithComments(lines, indentation, firstInBlock);\n  }\n\n  var text = lines.join('\\n');\n  var preferMultipleLines = text.length > 70;\n  var blockString = printBlockString(text, '', preferMultipleLines);\n  var prefix = indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}\n\nfunction printDescriptionWithComments(lines, indentation, firstInBlock) {\n  var description = indentation && !firstInBlock ? '\\n' : '';\n\n  for (var _i2 = 0; _i2 < lines.length; _i2++) {\n    var line = lines[_i2];\n\n    if (line === '') {\n      description += indentation + '#\\n';\n    } else {\n      description += indentation + '# ' + line + '\\n';\n    }\n  }\n\n  return description;\n}\n\nfunction descriptionLines(description, maxLen) {\n  var rawLines = description.split('\\n');\n  return flatMap(rawLines, function (line) {\n    if (line.length < maxLen + 5) {\n      return line;\n    } // For > 120 character long lines, cut at space boundaries into sublines\n    // of ~80 chars.\n\n\n    return breakLine(line, maxLen);\n  });\n}\n\nfunction breakLine(line, maxLen) {\n  var parts = line.split(new RegExp(\"((?: |^).{15,\".concat(maxLen - 40, \"}(?= |$))\")));\n\n  if (parts.length < 4) {\n    return [line];\n  }\n\n  var sublines = [parts[0] + parts[1] + parts[2]];\n\n  for (var i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1]);\n  }\n\n  return sublines;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}