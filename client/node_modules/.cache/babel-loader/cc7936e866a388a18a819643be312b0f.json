{"ast":null,"code":"import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  /* istanbul ignore else */\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // Not reachable. All possible type nodes have been considered.\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type node: ' + inspect(typeNode));\n}","map":{"version":3,"names":["inspect","invariant","Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value"],"sources":["C:/Users/Christian Flores/Desktop/Deja-Brew/client/node_modules/graphql/utilities/typeFromAST.mjs"],"sourcesContent":["import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  /* istanbul ignore else */\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // Not reachable. All possible type nodes have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type node: ' + inspect(typeNode));\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,EAAEC,cAAc,QAAQ,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,SAASC,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC5C;EACA,IAAIC,SAAS;EAEb,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACQ,SAAS,EAAE;IACpCF,SAAS,GAAGH,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOH,SAAS,IAAIL,WAAW,CAACK,SAAS,CAAC;EAC5C;EAEA,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACU,aAAa,EAAE;IACxCJ,SAAS,GAAGH,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOH,SAAS,IAAIJ,cAAc,CAACI,SAAS,CAAC;EAC/C;;EAEA;EACA,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACW,UAAU,EAAE;IACrC,OAAOP,MAAM,CAACQ,OAAO,CAACP,QAAQ,CAACQ,IAAI,CAACC,KAAK,CAAC;EAC5C,CAAC,CAAC;;EAGF;EACAf,SAAS,CAAC,KAAK,EAAE,wBAAwB,GAAGD,OAAO,CAACO,QAAQ,CAAC,CAAC;AAChE"},"metadata":{},"sourceType":"module"}