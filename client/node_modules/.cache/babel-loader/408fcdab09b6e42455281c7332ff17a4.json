{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationTypeMessage(operation) {\n  return \"There can be only one \".concat(operation, \" type in schema.\");\n}\nexport function existedOperationTypeMessage(operation) {\n  return \"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\");\n}\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypes(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n  function checkOperationTypes(node) {\n    if (node.operationTypes) {\n      for (var _i2 = 0, _ref2 = node.operationTypes || []; _i2 < _ref2.length; _i2++) {\n        var operationType = _ref2[_i2];\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(existedOperationTypeMessage(operation), operationType));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(duplicateOperationTypeMessage(operation), [alreadyDefinedOperationType, operationType]));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","duplicateOperationTypeMessage","operation","concat","existedOperationTypeMessage","UniqueOperationTypes","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","operationTypes","_i2","_ref2","length","operationType","alreadyDefinedOperationType","reportError"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/UniqueOperationTypes.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationTypeMessage(operation) {\n  return \"There can be only one \".concat(operation, \" type in schema.\");\n}\nexport function existedOperationTypeMessage(operation) {\n  return \"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\");\n}\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypes(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    if (node.operationTypes) {\n      for (var _i2 = 0, _ref2 = node.operationTypes || []; _i2 < _ref2.length; _i2++) {\n        var operationType = _ref2[_i2];\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(existedOperationTypeMessage(operation), operationType));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(duplicateOperationTypeMessage(operation), [alreadyDefinedOperationType, operationType]));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,6BAA6B,CAACC,SAAS,EAAE;EACvD,OAAO,wBAAwB,CAACC,MAAM,CAACD,SAAS,EAAE,kBAAkB,CAAC;AACvE;AACA,OAAO,SAASE,2BAA2B,CAACF,SAAS,EAAE;EACrD,OAAO,WAAW,CAACC,MAAM,CAACD,SAAS,EAAE,yDAAyD,CAAC;AACjG;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,oBAAoB,CAACC,OAAO,EAAE;EAC5C,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAChC,IAAIC,qBAAqB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC/C,IAAIC,sBAAsB,GAAGL,MAAM,GAAG;IACpCM,KAAK,EAAEN,MAAM,CAACO,YAAY,EAAE;IAC5BC,QAAQ,EAAER,MAAM,CAACS,eAAe,EAAE;IAClCC,YAAY,EAAEV,MAAM,CAACW,mBAAmB;EAC1C,CAAC,GAAG,CAAC,CAAC;EACN,OAAO;IACLC,gBAAgB,EAAEC,mBAAmB;IACrCC,eAAe,EAAED;EACnB,CAAC;EAED,SAASA,mBAAmB,CAACE,IAAI,EAAE;IACjC,IAAIA,IAAI,CAACC,cAAc,EAAE;MACvB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,KAAK,GAAGH,IAAI,CAACC,cAAc,IAAI,EAAE,EAAEC,GAAG,GAAGC,KAAK,CAACC,MAAM,EAAEF,GAAG,EAAE,EAAE;QAC9E,IAAIG,aAAa,GAAGF,KAAK,CAACD,GAAG,CAAC;QAC9B,IAAItB,SAAS,GAAGyB,aAAa,CAACzB,SAAS;QACvC,IAAI0B,2BAA2B,GAAGnB,qBAAqB,CAACP,SAAS,CAAC;QAElE,IAAIU,sBAAsB,CAACV,SAAS,CAAC,EAAE;UACrCI,OAAO,CAACuB,WAAW,CAAC,IAAI7B,YAAY,CAACI,2BAA2B,CAACF,SAAS,CAAC,EAAEyB,aAAa,CAAC,CAAC;QAC9F,CAAC,MAAM,IAAIC,2BAA2B,EAAE;UACtCtB,OAAO,CAACuB,WAAW,CAAC,IAAI7B,YAAY,CAACC,6BAA6B,CAACC,SAAS,CAAC,EAAE,CAAC0B,2BAA2B,EAAED,aAAa,CAAC,CAAC,CAAC;QAC/H,CAAC,MAAM;UACLlB,qBAAqB,CAACP,SAAS,CAAC,GAAGyB,aAAa;QAClD;MACF;IACF;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module"}