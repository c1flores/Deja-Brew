{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateVariableMessage(variableName) {\n  return \"There can be only one variable named \\\"\".concat(variableName, \"\\\".\");\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateVariableMessage","variableName","concat","UniqueVariableNames","context","knownVariableNames","Object","create","OperationDefinition","VariableDefinition","node","variable","name","value","reportError"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/UniqueVariableNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateVariableMessage(variableName) {\n  return \"There can be only one variable named \\\"\".concat(variableName, \"\\\".\");\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,wBAAwB,CAACC,YAAY,EAAE;EACrD,OAAO,yCAAyC,CAACC,MAAM,CAACD,YAAY,EAAE,KAAK,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,mBAAmB,CAACC,OAAO,EAAE;EAC3C,IAAIC,kBAAkB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC5C,OAAO;IACLC,mBAAmB,EAAE,SAASA,mBAAmB,GAAG;MAClDH,kBAAkB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC1C,CAAC;IACDE,kBAAkB,EAAE,SAASA,kBAAkB,CAACC,IAAI,EAAE;MACpD,IAAIT,YAAY,GAAGS,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK;MAE3C,IAAIR,kBAAkB,CAACJ,YAAY,CAAC,EAAE;QACpCG,OAAO,CAACU,WAAW,CAAC,IAAIf,YAAY,CAACC,wBAAwB,CAACC,YAAY,CAAC,EAAE,CAACI,kBAAkB,CAACJ,YAAY,CAAC,EAAES,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MACvI,CAAC,MAAM;QACLP,kBAAkB,CAACJ,YAAY,CAAC,GAAGS,IAAI,CAACC,QAAQ,CAACC,IAAI;MACvD;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}