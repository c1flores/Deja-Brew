{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","unusedVariableMessage","varName","opName","concat","NoUnusedVariables","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","name","value","_i2","length","_ref2","node","_i4","_variableDefs2","variableDef","variableName","variable","reportError","VariableDefinition","def","push"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/NoUnusedVariables.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,qBAAqB,CAACC,OAAO,EAAEC,MAAM,EAAE;EACrD,OAAOA,MAAM,GAAG,cAAc,CAACC,MAAM,CAACF,OAAO,EAAE,kCAAkC,CAAC,CAACE,MAAM,CAACD,MAAM,EAAE,KAAK,CAAC,GAAG,cAAc,CAACC,MAAM,CAACF,OAAO,EAAE,mBAAmB,CAAC;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,iBAAiB,CAACC,OAAO,EAAE;EACzC,IAAIC,YAAY,GAAG,EAAE;EACrB,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,EAAE,SAASA,KAAK,GAAG;QACtBF,YAAY,GAAG,EAAE;MACnB,CAAC;MACDG,KAAK,EAAE,SAASA,KAAK,CAACC,SAAS,EAAE;QAC/B,IAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QAC1C,IAAIC,MAAM,GAAGT,OAAO,CAACU,0BAA0B,CAACL,SAAS,CAAC;QAC1D,IAAIR,MAAM,GAAGQ,SAAS,CAACM,IAAI,GAAGN,SAAS,CAACM,IAAI,CAACC,KAAK,GAAG,IAAI;QAEzD,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,MAAM,CAACK,MAAM,EAAED,GAAG,EAAE,EAAE;UAC5C,IAAIE,KAAK,GAAGN,MAAM,CAACI,GAAG,CAAC;UACvB,IAAIG,IAAI,GAAGD,KAAK,CAACC,IAAI;UACrBV,gBAAgB,CAACU,IAAI,CAACL,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;QAC1C;QAEA,KAAK,IAAIK,GAAG,GAAG,CAAC,EAAEC,cAAc,GAAGjB,YAAY,EAAEgB,GAAG,GAAGC,cAAc,CAACJ,MAAM,EAAEG,GAAG,EAAE,EAAE;UACnF,IAAIE,WAAW,GAAGD,cAAc,CAACD,GAAG,CAAC;UACrC,IAAIG,YAAY,GAAGD,WAAW,CAACE,QAAQ,CAACV,IAAI,CAACC,KAAK;UAElD,IAAIN,gBAAgB,CAACc,YAAY,CAAC,KAAK,IAAI,EAAE;YAC3CpB,OAAO,CAACsB,WAAW,CAAC,IAAI5B,YAAY,CAACC,qBAAqB,CAACyB,YAAY,EAAEvB,MAAM,CAAC,EAAEsB,WAAW,CAAC,CAAC;UACjG;QACF;MACF;IACF,CAAC;IACDI,kBAAkB,EAAE,SAASA,kBAAkB,CAACC,GAAG,EAAE;MACnDvB,YAAY,CAACwB,IAAI,CAACD,GAAG,CAAC;IACxB;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}