{"ast":null,"code":"import invariant from '../jsutils/invariant';\nimport isPromise from '../jsutils/isPromise';\nimport { parse } from '../language/parser';\nimport { execute } from '../execution/execute';\nimport { getIntrospectionQuery } from './introspectionQuery';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n\n  /* istanbul ignore next */\n  !isPromise(result) && !result.errors && result.data || invariant(0);\n  return result.data;\n}","map":{"version":3,"names":["invariant","isPromise","parse","execute","getIntrospectionQuery","introspectionFromSchema","schema","options","queryAST","result","errors","data"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/utilities/introspectionFromSchema.mjs"],"sourcesContent":["import invariant from '../jsutils/invariant';\nimport isPromise from '../jsutils/isPromise';\nimport { parse } from '../language/parser';\nimport { execute } from '../execution/execute';\nimport { getIntrospectionQuery } from './introspectionQuery';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n\n  /* istanbul ignore next */\n  !isPromise(result) && !result.errors && result.data || invariant(0);\n  return result.data;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,qBAAqB,QAAQ,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAuB,CAACC,MAAM,EAAEC,OAAO,EAAE;EACvD,IAAIC,QAAQ,GAAGN,KAAK,CAACE,qBAAqB,CAACG,OAAO,CAAC,CAAC;EACpD,IAAIE,MAAM,GAAGN,OAAO,CAACG,MAAM,EAAEE,QAAQ,CAAC;;EAEtC;EACA,CAACP,SAAS,CAACQ,MAAM,CAAC,IAAI,CAACA,MAAM,CAACC,MAAM,IAAID,MAAM,CAACE,IAAI,IAAIX,SAAS,CAAC,CAAC,CAAC;EACnE,OAAOS,MAAM,CAACE,IAAI;AACpB"},"metadata":{},"sourceType":"module"}