{"ast":null,"code":"/* istanbul ignore file */\nimport inspect from '../jsutils/inspect';\nimport printPathArray from '../jsutils/printPathArray';\nimport { pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { coerceInputValue } from './coerceInputValue';\n\n/**\n * Deprecated. Use coerceInputValue() directly for richer information.\n *\n * This function will be removed in v15\n */\nexport function coerceValue(inputValue, type, blameNode, path) {\n  var errors = [];\n  var value = coerceInputValue(inputValue, type, function (errorPath, invalidValue, error) {\n    var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n    var pathArray = [].concat(pathToArray(path), errorPath);\n    if (pathArray.length > 0) {\n      errorPrefix += \" at \\\"value\".concat(printPathArray(pathArray), \"\\\"\");\n    }\n    errors.push(new GraphQLError(errorPrefix + ': ' + error.message, blameNode, undefined, undefined, undefined, error.originalError));\n  });\n  return errors.length > 0 ? {\n    errors: errors,\n    value: undefined\n  } : {\n    errors: undefined,\n    value: value\n  };\n}","map":{"version":3,"names":["inspect","printPathArray","pathToArray","GraphQLError","coerceInputValue","coerceValue","inputValue","type","blameNode","path","errors","value","errorPath","invalidValue","error","errorPrefix","pathArray","concat","length","push","message","undefined","originalError"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/utilities/coerceValue.mjs"],"sourcesContent":["/* istanbul ignore file */\nimport inspect from '../jsutils/inspect';\nimport printPathArray from '../jsutils/printPathArray';\nimport { pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { coerceInputValue } from './coerceInputValue';\n\n/**\n * Deprecated. Use coerceInputValue() directly for richer information.\n *\n * This function will be removed in v15\n */\nexport function coerceValue(inputValue, type, blameNode, path) {\n  var errors = [];\n  var value = coerceInputValue(inputValue, type, function (errorPath, invalidValue, error) {\n    var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n    var pathArray = [].concat(pathToArray(path), errorPath);\n\n    if (pathArray.length > 0) {\n      errorPrefix += \" at \\\"value\".concat(printPathArray(pathArray), \"\\\"\");\n    }\n\n    errors.push(new GraphQLError(errorPrefix + ': ' + error.message, blameNode, undefined, undefined, undefined, error.originalError));\n  });\n  return errors.length > 0 ? {\n    errors: errors,\n    value: undefined\n  } : {\n    errors: undefined,\n    value: value\n  };\n}\n"],"mappings":"AAAA;AACA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,gBAAgB,QAAQ,oBAAoB;;AAErD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,UAAU,EAAEC,IAAI,EAAEC,SAAS,EAAEC,IAAI,EAAE;EAC7D,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAGP,gBAAgB,CAACE,UAAU,EAAEC,IAAI,EAAE,UAAUK,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAE;IACvF,IAAIC,WAAW,GAAG,gBAAgB,GAAGf,OAAO,CAACa,YAAY,CAAC;IAC1D,IAAIG,SAAS,GAAG,EAAE,CAACC,MAAM,CAACf,WAAW,CAACO,IAAI,CAAC,EAAEG,SAAS,CAAC;IAEvD,IAAII,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;MACxBH,WAAW,IAAI,aAAa,CAACE,MAAM,CAAChB,cAAc,CAACe,SAAS,CAAC,EAAE,IAAI,CAAC;IACtE;IAEAN,MAAM,CAACS,IAAI,CAAC,IAAIhB,YAAY,CAACY,WAAW,GAAG,IAAI,GAAGD,KAAK,CAACM,OAAO,EAAEZ,SAAS,EAAEa,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEP,KAAK,CAACQ,aAAa,CAAC,CAAC;EACpI,CAAC,CAAC;EACF,OAAOZ,MAAM,CAACQ,MAAM,GAAG,CAAC,GAAG;IACzBR,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEU;EACT,CAAC,GAAG;IACFX,MAAM,EAAEW,SAAS;IACjBV,KAAK,EAAEA;EACT,CAAC;AACH"},"metadata":{},"sourceType":"module"}