{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationNameMessage(operationName) {\n  return \"There can be only one operation named \\\"\".concat(operationName, \"\\\".\");\n}\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\n\nexport function UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateOperationNameMessage","operationName","concat","UniqueOperationNames","context","knownOperationNames","Object","create","OperationDefinition","node","name","value","reportError","FragmentDefinition"],"sources":["C:/Users/Christian Flores/Desktop/Deja-Brew/client/node_modules/graphql/validation/rules/UniqueOperationNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationNameMessage(operationName) {\n  return \"There can be only one operation named \\\"\".concat(operationName, \"\\\".\");\n}\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\n\nexport function UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,6BAA6B,CAACC,aAAa,EAAE;EAC3D,OAAO,0CAA0C,CAACC,MAAM,CAACD,aAAa,EAAE,KAAK,CAAC;AAChF;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,oBAAoB,CAACC,OAAO,EAAE;EAC5C,IAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC7C,OAAO;IACLC,mBAAmB,EAAE,SAASA,mBAAmB,CAACC,IAAI,EAAE;MACtD,IAAIR,aAAa,GAAGQ,IAAI,CAACC,IAAI;MAE7B,IAAIT,aAAa,EAAE;QACjB,IAAII,mBAAmB,CAACJ,aAAa,CAACU,KAAK,CAAC,EAAE;UAC5CP,OAAO,CAACQ,WAAW,CAAC,IAAIb,YAAY,CAACC,6BAA6B,CAACC,aAAa,CAACU,KAAK,CAAC,EAAE,CAACN,mBAAmB,CAACJ,aAAa,CAACU,KAAK,CAAC,EAAEV,aAAa,CAAC,CAAC,CAAC;QACtJ,CAAC,MAAM;UACLI,mBAAmB,CAACJ,aAAa,CAACU,KAAK,CAAC,GAAGV,aAAa;QAC1D;MACF;MAEA,OAAO,KAAK;IACd,CAAC;IACDY,kBAAkB,EAAE,SAASA,kBAAkB,GAAG;MAChD,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}