{"ast":null,"code":"import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\nvar Parser = /*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  var _proto = Parser.prototype;\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n        case 'fragment':\n          return this.parseFragmentDefinition();\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n    var operation = this.parseOperationType();\n    var name;\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n      case 'mutation':\n        return 'mutation';\n      case 'subscription':\n        return 'subscription';\n    }\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n      case TokenKind.INT:\n        this._lexer.advance();\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n        this._lexer.advance();\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n        break;\n    }\n    throw this.unexpected();\n  };\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n    this._lexer.advance();\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n    var start = this._lexer.token;\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n    var start = this._lexer.token;\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n        case 'type':\n          return this.parseObjectTypeDefinition();\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n        case 'union':\n          return this.parseUnionTypeDefinition();\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n    throw this.unexpected(keywordToken);\n  };\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) ||\n      // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n      this._lexer.advance();\n      return [];\n    }\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n        case 'type':\n          return this.parseObjectTypeExtension();\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n        case 'union':\n          return this.parseUnionTypeExtension();\n        case 'enum':\n          return this.parseEnumTypeExtension();\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n    if (token.kind === kind) {\n      this._lexer.advance();\n      return token;\n    }\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n    if (token.kind === kind) {\n      this._lexer.advance();\n      return token;\n    }\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n      return nodes;\n    }\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n    return nodes;\n  };\n  return Parser;\n}();\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}","map":{"version":3,"names":["inspect","devAssert","defineToJSON","syntaxError","Kind","Source","createLexer","DirectiveLocation","TokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","sourceObj","concat","_lexer","_options","_proto","prototype","parseName","token","NAME","kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advance","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","_this","LIST","values","any","BRACKET_R","_this2","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","startToken","noLocation","Loc","lastToken","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes","call","endToken","end"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/language/parser.mjs"],"sourcesContent":["import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}