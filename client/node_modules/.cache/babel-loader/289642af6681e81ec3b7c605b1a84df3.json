{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateTypeNameMessage(typeName) {\n  return \"There can be only one type named \\\"\".concat(typeName, \"\\\".\");\n}\nexport function existedTypeNameMessage(typeName) {\n  return \"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\");\n}\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\nexport function UniqueTypeNames(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n    if (schema && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(existedTypeNameMessage(typeName), node.name));\n      return;\n    }\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(duplicateTypeNameMessage(typeName), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","duplicateTypeNameMessage","typeName","concat","existedTypeNameMessage","UniqueTypeNames","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","name","value","getType","reportError"],"sources":["C:/Users/Christian Flores/Desktop/Deja-Brew/client/node_modules/graphql/validation/rules/UniqueTypeNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateTypeNameMessage(typeName) {\n  return \"There can be only one type named \\\"\".concat(typeName, \"\\\".\");\n}\nexport function existedTypeNameMessage(typeName) {\n  return \"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\");\n}\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\nexport function UniqueTypeNames(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(existedTypeNameMessage(typeName), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(duplicateTypeNameMessage(typeName), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,wBAAwB,CAACC,QAAQ,EAAE;EACjD,OAAO,qCAAqC,CAACC,MAAM,CAACD,QAAQ,EAAE,KAAK,CAAC;AACtE;AACA,OAAO,SAASE,sBAAsB,CAACF,QAAQ,EAAE;EAC/C,OAAO,SAAS,CAACC,MAAM,CAACD,QAAQ,EAAE,qFAAqF,CAAC;AAC1H;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,eAAe,CAACC,OAAO,EAAE;EACvC,IAAIC,cAAc,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxC,IAAIC,MAAM,GAAGJ,OAAO,CAACK,SAAS,EAAE;EAChC,OAAO;IACLC,oBAAoB,EAAEC,aAAa;IACnCC,oBAAoB,EAAED,aAAa;IACnCE,uBAAuB,EAAEF,aAAa;IACtCG,mBAAmB,EAAEH,aAAa;IAClCI,kBAAkB,EAAEJ,aAAa;IACjCK,yBAAyB,EAAEL;EAC7B,CAAC;EAED,SAASA,aAAa,CAACM,IAAI,EAAE;IAC3B,IAAIjB,QAAQ,GAAGiB,IAAI,CAACC,IAAI,CAACC,KAAK;IAE9B,IAAIX,MAAM,IAAIA,MAAM,CAACY,OAAO,CAACpB,QAAQ,CAAC,EAAE;MACtCI,OAAO,CAACiB,WAAW,CAAC,IAAIvB,YAAY,CAACI,sBAAsB,CAACF,QAAQ,CAAC,EAAEiB,IAAI,CAACC,IAAI,CAAC,CAAC;MAClF;IACF;IAEA,IAAIb,cAAc,CAACL,QAAQ,CAAC,EAAE;MAC5BI,OAAO,CAACiB,WAAW,CAAC,IAAIvB,YAAY,CAACC,wBAAwB,CAACC,QAAQ,CAAC,EAAE,CAACK,cAAc,CAACL,QAAQ,CAAC,EAAEiB,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IAClH,CAAC,MAAM;MACLb,cAAc,CAACL,QAAQ,CAAC,GAAGiB,IAAI,CAACC,IAAI;IACtC;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module"}