{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { isEnumType } from '../../type/definition';\nexport function duplicateEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\");\n}\nexport function existedEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n  function checkValueUniqueness(node) {\n    var typeName = node.name.value;\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    }\n    if (node.values) {\n      var valueNames = knownValueNames[typeName];\n      for (var _i2 = 0, _node$values2 = node.values; _i2 < _node$values2.length; _i2++) {\n        var valueDef = _node$values2[_i2];\n        var valueName = valueDef.name.value;\n        var existingType = existingTypeMap[typeName];\n        if (isEnumType(existingType) && existingType.getValue(valueName)) {\n          context.reportError(new GraphQLError(existedEnumValueNameMessage(typeName, valueName), valueDef.name));\n        } else if (valueNames[valueName]) {\n          context.reportError(new GraphQLError(duplicateEnumValueNameMessage(typeName, valueName), [valueNames[valueName], valueDef.name]));\n        } else {\n          valueNames[valueName] = valueDef.name;\n        }\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","isEnumType","duplicateEnumValueNameMessage","typeName","valueName","concat","existedEnumValueNameMessage","UniqueEnumValueNames","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","name","value","values","valueNames","_i2","_node$values2","length","valueDef","existingType","getValue","reportError"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/UniqueEnumValueNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { isEnumType } from '../../type/definition';\nexport function duplicateEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\");\n}\nexport function existedEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    }\n\n    if (node.values) {\n      var valueNames = knownValueNames[typeName];\n\n      for (var _i2 = 0, _node$values2 = node.values; _i2 < _node$values2.length; _i2++) {\n        var valueDef = _node$values2[_i2];\n        var valueName = valueDef.name.value;\n        var existingType = existingTypeMap[typeName];\n\n        if (isEnumType(existingType) && existingType.getValue(valueName)) {\n          context.reportError(new GraphQLError(existedEnumValueNameMessage(typeName, valueName), valueDef.name));\n        } else if (valueNames[valueName]) {\n          context.reportError(new GraphQLError(duplicateEnumValueNameMessage(typeName, valueName), [valueNames[valueName], valueDef.name]));\n        } else {\n          valueNames[valueName] = valueDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,OAAO,SAASC,6BAA6B,CAACC,QAAQ,EAAEC,SAAS,EAAE;EACjE,OAAO,eAAe,CAACC,MAAM,CAACF,QAAQ,EAAE,GAAG,CAAC,CAACE,MAAM,CAACD,SAAS,EAAE,8BAA8B,CAAC;AAChG;AACA,OAAO,SAASE,2BAA2B,CAACH,QAAQ,EAAEC,SAAS,EAAE;EAC/D,OAAO,eAAe,CAACC,MAAM,CAACF,QAAQ,EAAE,GAAG,CAAC,CAACE,MAAM,CAACD,SAAS,EAAE,oFAAoF,CAAC;AACtJ;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,oBAAoB,CAACC,OAAO,EAAE;EAC5C,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAChC,IAAIC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAU,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxE,IAAIC,eAAe,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACzC,OAAO;IACLE,kBAAkB,EAAEC,oBAAoB;IACxCC,iBAAiB,EAAED;EACrB,CAAC;EAED,SAASA,oBAAoB,CAACE,IAAI,EAAE;IAClC,IAAIhB,QAAQ,GAAGgB,IAAI,CAACC,IAAI,CAACC,KAAK;IAE9B,IAAI,CAACN,eAAe,CAACZ,QAAQ,CAAC,EAAE;MAC9BY,eAAe,CAACZ,QAAQ,CAAC,GAAGU,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACjD;IAEA,IAAIK,IAAI,CAACG,MAAM,EAAE;MACf,IAAIC,UAAU,GAAGR,eAAe,CAACZ,QAAQ,CAAC;MAE1C,KAAK,IAAIqB,GAAG,GAAG,CAAC,EAAEC,aAAa,GAAGN,IAAI,CAACG,MAAM,EAAEE,GAAG,GAAGC,aAAa,CAACC,MAAM,EAAEF,GAAG,EAAE,EAAE;QAChF,IAAIG,QAAQ,GAAGF,aAAa,CAACD,GAAG,CAAC;QACjC,IAAIpB,SAAS,GAAGuB,QAAQ,CAACP,IAAI,CAACC,KAAK;QACnC,IAAIO,YAAY,GAAGjB,eAAe,CAACR,QAAQ,CAAC;QAE5C,IAAIF,UAAU,CAAC2B,YAAY,CAAC,IAAIA,YAAY,CAACC,QAAQ,CAACzB,SAAS,CAAC,EAAE;UAChEI,OAAO,CAACsB,WAAW,CAAC,IAAI9B,YAAY,CAACM,2BAA2B,CAACH,QAAQ,EAAEC,SAAS,CAAC,EAAEuB,QAAQ,CAACP,IAAI,CAAC,CAAC;QACxG,CAAC,MAAM,IAAIG,UAAU,CAACnB,SAAS,CAAC,EAAE;UAChCI,OAAO,CAACsB,WAAW,CAAC,IAAI9B,YAAY,CAACE,6BAA6B,CAACC,QAAQ,EAAEC,SAAS,CAAC,EAAE,CAACmB,UAAU,CAACnB,SAAS,CAAC,EAAEuB,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAC;QACnI,CAAC,MAAM;UACLG,UAAU,CAACnB,SAAS,CAAC,GAAGuB,QAAQ,CAACP,IAAI;QACvC;MACF;IACF;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module"}