{"ast":null,"code":"/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n  return commonIndent === null ? 0 : commonIndent;\n}\nfunction leadingWhitespace(str) {\n  var i = 0;\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n  return i;\n}\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","map":{"version":3,"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","isBlank","shift","pop","join","line","indent","leadingWhitespace","str","printBlockString","value","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","result","replace"],"sources":["C:/Users/Christian Flores/Desktop/Deja-Brew/client/node_modules/graphql/language/blockString.mjs"],"sourcesContent":["/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}