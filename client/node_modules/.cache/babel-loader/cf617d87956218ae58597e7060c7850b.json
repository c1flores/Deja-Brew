{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition';\nexport function duplicateFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\");\n}\nexport function existedFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n  function checkFieldUniqueness(node) {\n    var typeName = node.name.value;\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    }\n    if (node.fields) {\n      var fieldNames = knownFieldNames[typeName];\n      for (var _i2 = 0, _node$fields2 = node.fields; _i2 < _node$fields2.length; _i2++) {\n        var fieldDef = _node$fields2[_i2];\n        var fieldName = fieldDef.name.value;\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(existedFieldDefinitionNameMessage(typeName, fieldName), fieldDef.name));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(duplicateFieldDefinitionNameMessage(typeName, fieldName), [fieldNames[fieldName], fieldDef.name]));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    }\n    return false;\n  }\n}\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName];\n  }\n  return false;\n}","map":{"version":3,"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","duplicateFieldDefinitionNameMessage","typeName","fieldName","concat","existedFieldDefinitionNameMessage","UniqueFieldDefinitionNames","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","name","value","fields","fieldNames","_i2","_node$fields2","length","fieldDef","hasField","reportError","type","getFields"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/validation/rules/UniqueFieldDefinitionNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition';\nexport function duplicateFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\");\n}\nexport function existedFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    }\n\n    if (node.fields) {\n      var fieldNames = knownFieldNames[typeName];\n\n      for (var _i2 = 0, _node$fields2 = node.fields; _i2 < _node$fields2.length; _i2++) {\n        var fieldDef = _node$fields2[_i2];\n        var fieldName = fieldDef.name.value;\n\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(existedFieldDefinitionNameMessage(typeName, fieldName), fieldDef.name));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(duplicateFieldDefinitionNameMessage(typeName, fieldName), [fieldNames[fieldName], fieldDef.name]));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName];\n  }\n\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}