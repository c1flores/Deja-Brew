{"ast":null,"code":"import { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport memoize3 from '../jsutils/memoize3';\nimport invariant from '../jsutils/invariant';\nimport devAssert from '../jsutils/devAssert';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport { addPath, pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { Kind } from '../language/kinds';\nimport { assertValidSchema } from '../type/validate';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\nfunction executeImpl(args) {\n  var schema = args.schema,\n    document = args.document,\n    rootValue = args.rootValue,\n    contextValue = args.contextValue,\n    variableValues = args.variableValues,\n    operationName = args.operationName,\n    fieldResolver = args.fieldResolver,\n    typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n  if (!operation) {\n    if (operationName) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n    return [new GraphQLError('Must provide an operation.')];\n  }\n  if (hasMultipleAssumedOperations) {\n    return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n  }\n  var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {}, {\n    maxErrors: 50\n  });\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    typeResolver: typeResolver || defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result !== undefined) {\n      results[responseName] = result;\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n          var name = getFieldEntryKey(selection);\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n          fields[name].push(selection);\n          break;\n        }\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n  return new Error('Unexpected error value: ' + inspect(error));\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, pathToArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n  /* istanbul ignore else */\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n  invariant(false, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  if (!isCollection(result)) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var resolveTypeFn = returnType.resolveType || exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at runtime for field \").concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  }\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nvar collectSubfields = memoize3(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9];\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["forEach","isCollection","inspect","memoize3","invariant","devAssert","isInvalid","isNullish","isPromise","isObjectLike","promiseReduce","promiseForObject","addPath","pathToArray","GraphQLError","locatedError","Kind","assertValidSchema","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","typeFromAST","getOperationRootType","getVariableValues","getArgumentValues","getDirectiveValues","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","arguments","length","executeImpl","schema","args","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","rawVariableValues","hasMultipleAssumedOperations","fragments","Object","create","_i2","_document$definitions2","definitions","definition","kind","OPERATION_DEFINITION","name","value","FRAGMENT_DEFINITION","concat","coercedVariableValues","variableDefinitions","maxErrors","coerced","defaultFieldResolver","defaultTypeResolver","type","fields","collectFields","selectionSet","path","undefined","result","executeFieldsSerially","executeFields","error","push","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","_i4","_Object$keys2","runtimeType","visitedFragmentNames","_i6","_selectionSet$selecti2","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isPossibleType","alias","source","fieldNode","fieldName","fieldDef","getFieldDef","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","returnType","_contextValue","asErrorInstance","Error","completed","completeValue","handleFieldError","rawError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","completedItem","all","serializedResult","serialize","resolveTypeFn","resolveType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","_i8","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","i","isTypeOfResult","isTypeOfResults","_i9","property","getQueryType","getFields"],"sources":["C:/Users/Christian Flores/Desktop/UCB-VIRT-FSF-PT-07-2022-U-LOLC/22-State/02-Challenge/Main/client/node_modules/graphql/execution/execute.mjs"],"sourcesContent":["import { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport memoize3 from '../jsutils/memoize3';\nimport invariant from '../jsutils/invariant';\nimport devAssert from '../jsutils/devAssert';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport { addPath, pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { Kind } from '../language/kinds';\nimport { assertValidSchema } from '../type/validate';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n\nfunction executeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  }\n\n  if (hasMultipleAssumedOperations) {\n    return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n  }\n\n  var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {}, {\n    maxErrors: 50\n  });\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    typeResolver: typeResolver || defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          var name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n\n  return new Error('Unexpected error value: ' + inspect(error));\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, pathToArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  /* istanbul ignore else */\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  if (!isCollection(result)) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var resolveTypeFn = returnType.resolveType || exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at runtime for field \").concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9];\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}