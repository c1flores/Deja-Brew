{"ast":null,"code":"import objectValues from '../../polyfills/objectValues';\nimport keyMap from '../../jsutils/keyMap';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function badEnumValueMessage(typeName, valueName, suggestedValues) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName, \".\") + didYouMean('the enum value', suggestedValues);\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \").concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, suggestedFields) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName, \".\") + didYouMean(suggestedFields);\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldDef.name, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, suggestions), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badEnumValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n  if (!locationType) {\n    return;\n  }\n  var type = getNamedType(locationType);\n  if (!isScalarType(type)) {\n    var message = isEnumType(type) ? badEnumValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)) : badValueMessage(inspect(locationType), print(node));\n    context.reportError(new GraphQLError(message, node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */);\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\nfunction enumTypeSuggestion(type, node) {\n  var allNames = type.getValues().map(function (value) {\n    return value.name;\n  });\n  return suggestionList(print(node), allNames);\n}","map":{"version":3,"names":["objectValues","keyMap","inspect","isInvalid","didYouMean","suggestionList","GraphQLError","print","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","badValueMessage","typeName","valueName","message","concat","badEnumValueMessage","suggestedValues","requiredFieldMessage","fieldName","fieldTypeName","unknownFieldMessage","suggestedFields","ValuesOfCorrectType","context","NullValue","node","type","getInputType","reportError","ListValue","getParentInputType","isValidScalar","ObjectValue","fieldNodeMap","fields","field","name","value","_i2","_objectValues2","getFields","length","fieldDef","fieldNode","typeStr","ObjectField","parentType","fieldType","suggestions","Object","keys","EnumValue","getValue","enumTypeSuggestion","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","error","allNames","getValues","map"],"sources":["C:/Users/Christian Flores/Desktop/Deja-Brew/client/node_modules/graphql/validation/rules/ValuesOfCorrectType.mjs"],"sourcesContent":["import objectValues from '../../polyfills/objectValues';\nimport keyMap from '../../jsutils/keyMap';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function badEnumValueMessage(typeName, valueName, suggestedValues) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName, \".\") + didYouMean('the enum value', suggestedValues);\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \").concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, suggestedFields) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName, \".\") + didYouMean(suggestedFields);\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldDef.name, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, suggestions), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badEnumValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    var message = isEnumType(type) ? badEnumValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)) : badValueMessage(inspect(locationType), print(node));\n    context.reportError(new GraphQLError(message, node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  var allNames = type.getValues().map(function (value) {\n    return value.name;\n  });\n  return suggestionList(print(node), allNames);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}